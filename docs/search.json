[{"path":"/articles/boston.html","id":"data-description-and-variable-selection","dir":"Articles","previous_headings":"","what":"Data description and variable selection","title":"Boston Housing","text":"illustrate effect cellwise outlier propagation previously considered estimators using Boston Housing dataset. data available UCI maching learning repository (https://archive.ics.uci.edu/ml/index.php) collected \\(506\\) census samples \\(14\\) different variables. original objective study analyze association median housing values () Boston residents willingness pay clean air, well association variables dataset. consider \\(9\\) quantitative variables extensively studied. sparse regression model fitted , \\[     \\log(medv) =  \\ \\beta_0 + \\beta_1 \\log(lstat) + \\beta_2 rm + \\beta_3 \\log(dis) + \\beta_4 tax \\\\  + \\beta_5 ptratio  + \\beta_6 nox+ \\beta_7 age + \\beta_8 black + \\beta_9 \\log(crim) + \\varepsilon,\\\\ \\] compare performance five methods: Lasso (Tibshirani, 1996), ALasso (Zou,2006), sLTS (Alfons et al., 2013), sShootingS (Bottmer et al., 2021) well new proposed methods ALRPm LRP, ALGR LGR. measure performance variable selection adding known redundant variables, generate \\(10\\) additional random variables redundant predictors using setting previous simulation section. Therefore, now 19 predictors choose . test performance cellwise contamination, standardize 19 predictors robust estimators location (use median) scale (use \\(Q_n\\)). , predictor, \\(10\\%\\) cells replaced cellwise outliers randomly generated \\(0.5 N(10, 1)+ 0.5N(-10, 1)\\). comparison, also run simulations without contamination {investigate stable various methods known outliers present data}. repeat process adding ten redundant variables followed generating 10% outliers 19 explanatory variables 1,000 times, compute selection rates variable","code":""},{"path":"/articles/boston.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Boston Housing","text":"","code":"library(MASS) # the Boston dataset library(robcovsel) library(doParallel) #> Loading required package: foreach #> Loading required package: iterators #> Loading required package: parallel library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.2     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ purrr::accumulate() masks foreach::accumulate() #> ✖ dplyr::filter()     masks stats::filter() #> ✖ dplyr::lag()        masks stats::lag() #> ✖ dplyr::select()     masks MASS::select() #> ✖ purrr::when()       masks foreach::when() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(corrplot) #> corrplot 0.92 loaded   data(\"Boston\") y = log(Boston$medv) Boston = Boston %>% mutate(loglstat = log(lstat), logdis = log(dis), logcrim = log(crim)) predictors = Boston[, c(\"loglstat\", \"rm\", \"logdis\", \"tax\", \"ptratio\",\"nox\", \"age\", \"black\", \"logcrim\")]   corrs = cor(predictors) rownames(corrs) = colnames(corrs) = c(\"log(lstat)\", \"rm\", \"log(dis)\", \"tax\", \"ptratio\",\"nox\", \"age\", \"black\", \"log(crim)\") corrsplot = corrplot(corrs, method = \"shade\", tl.col =\"black\",shade.col = NA, tl.srt = 45, order = \"FPC\") {   ##load(\"result_simu_boston.RData\")   data(result_simu_boston)   Boston_result = as.data.frame(as.matrix(result))   Boston_result$method = c(\"lasso\", \"alasso\", \"sLTS\", \"sShootingS\", \"LGR\", \"LRP\", \"ALGR\", \"ALRP\")   #save(Boston_result, file = \"Boston_result.Rdata\")   Boston_result$method = factor(Boston_result$method, levels = c(\"ALRP\", \"LRP\", \"ALGR\", \"LGR\", \"lasso\", \"alasso\", \"sLTS\", \"sShootingS\"))   table = aggregate(.~e + method, data = Boston_result, function(x)mean(as.logical(x)))   tbl = cbind(table[,(1:11)],redundant = rowMeans(table[,-(1:11)]));   colnames(tbl)[3:11] = c(\"log(lstat)\", \"rm\", \"log(dis)\", \"tax\", \"ptratio\",\"nox\", \"age\", \"black\", \"log(crim)\")    }  tbl[,c(\"method\",\"e\",  rownames(corrsplot$corr), \"redundant\")] #>        method   e log(dis) black   rm ptratio log(lstat)  age  tax  nox #> 1        ALRP 0.0     1.00  0.00 1.00    1.00          1 0.00 0.00 1.00 #> 2        ALRP 0.1     1.00  0.00 1.00    1.00          1 0.00 0.00 1.00 #> 3         LRP 0.0     1.00  1.00 1.00    1.00          1 1.00 0.00 1.00 #> 4         LRP 0.1     1.00  0.64 1.00    1.00          1 0.28 0.00 1.00 #> 5        ALGR 0.0     1.00  0.00 1.00    1.00          1 1.00 1.00 1.00 #> 6        ALGR 0.1     1.00  0.63 1.00    0.99          1 0.54 0.04 1.00 #> 7         LGR 0.0     1.00  0.00 1.00    1.00          1 0.50 0.99 1.00 #> 8         LGR 0.1     1.00  0.91 1.00    1.00          1 0.94 0.18 1.00 #> 9       lasso 0.0     1.00  0.03 1.00    1.00          1 0.64 0.78 1.00 #> 10      lasso 0.1     1.00  0.77 0.99    1.00          1 0.80 0.51 0.91 #> 11     alasso 0.0     1.00  0.00 1.00    1.00          1 1.00 1.00 1.00 #> 12     alasso 0.1     0.99  0.55 0.98    1.00          1 0.60 0.17 0.80 #> 13       sLTS 0.0     1.00  1.00 1.00    1.00          1 0.00 0.00 1.00 #> 14       sLTS 0.1     0.67  0.44 0.96    0.84          1 0.29 0.26 0.86 #> 15 sShootingS 0.0     0.00  0.00 1.00    0.00          1 0.00 0.00 0.00 #> 16 sShootingS 0.1     0.01  0.00 0.99    0.00          1 0.00 0.00 0.00 #>    log(crim)  redundant #> 1       0.76 0.08000000 #> 2       0.03 0.07909091 #> 3       0.99 0.13363636 #> 4       0.09 0.10636364 #> 5       0.00 0.05636364 #> 6       0.16 0.07272727 #> 7       0.00 0.13909091 #> 8       0.37 0.12000000 #> 9       1.00 0.12363636 #> 10      1.00 0.16727273 #> 11      1.00 0.05454545 #> 12      1.00 0.09181818 #> 13      1.00 0.01363636 #> 14      1.00 0.25090909 #> 15      0.00 0.00000000 #> 16      0.00 0.00000000  #write_csv(tbl[,c(\"method\",\"e\",  rownames(corrsplot$corr), \"redundant\")], \"Boston_table.csv\")"},{"path":"/articles/boston.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Boston Housing","text":"[1] Alfons, ., Croux, C., Gelper, S. (2013). Sparse least trimmed squares regression analyzing high-dimensional large data sets. Annals Applied Statistics, 7(1):226–248 [2] Bottmer, L., Croux, C., Wilms, . (2021). Sparse regression large data sets outliers. European Journal Operational Research, Press. [3] Tibshirani, R. (1996). Regression shrinkage selection via Lasso. Journal Royal Statistical Society: Series B (Methodological), 58(1):267–288 [4] Zou, H. (2006). Adaptive Lasso Oracle Properties. Journal American Statistical Association, 101(476):1418–1429.","code":""},{"path":"/articles/demo.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data generation","title":"demo","text":"","code":"gen = genevar(p = 10, e = 0.1) x = gen$x y = gen$y"},{"path":"/articles/demo.html","id":"test","dir":"Articles","previous_headings":"","what":"test","title":"demo","text":"","code":"system.time({fit1 = covlasso(x,y,cor.method = \"gaussrank\",scale.method = \"qn\")}) #>    user  system elapsed  #>   0.049   0.000   0.050 fit1$betahat #>       0         1        2         3         4         5         6         7 #>  [1,] 0 0.0000000 0.000000 0.0000000 0.2088718 0.7933608 0.9622280 0.9525494 #>  [2,] 0 0.0000000 2.261440 2.5267700 2.4791060 2.0801857 1.9613941 1.9521927 #>  [3,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.5747156 0.6849816 0.7486094 #>  [4,] 0 0.3764553 2.105097 1.8097514 1.7933083 1.7210207 1.7069260 1.7147535 #>  [5,] 0 0.0000000 0.000000 0.8997853 0.9958637 1.1263915 1.0921383 1.0569044 #>  [6,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [7,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 0.1950188 0.2416261 #>  [8,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [9,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1962714 #> [10,] 0 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>                8           9         10 #>  [1,]  0.9728413  0.98996394  0.9881586 #>  [2,]  1.9507830  1.93358121  1.9295391 #>  [3,]  0.7767618  0.83567186  0.8454470 #>  [4,]  1.6972118  1.68179164  1.6572072 #>  [5,]  1.0403553  1.01432913  1.0339781 #>  [6,]  0.0000000  0.00000000 -0.2237711 #>  [7,]  0.3062510  0.38661536  0.6177916 #>  [8,] -0.1084946 -0.22282208 -0.4038409 #>  [9,]  0.2600457  0.28224565  0.2856969 #> [10,]  0.0000000  0.08848232  0.2116918 #> attr(,\"scaled:scale\") #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peng Su. Author, maintainer. Garth Tarr. Author. Samuel Muller. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Su P, Tarr G, Muller S (2023). robcovsel: Robust variable selection based covariance matrix. R package version 0.2.0.","code":"@Manual{,   title = {robcovsel: Robust variable selection based on covariance matrix},   author = {Peng Su and Garth Tarr and Samuel Muller},   year = {2023},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"robcovsel","dir":"","previous_headings":"","what":"Robust variable selection based on covariance matrix","title":"Robust variable selection based on covariance matrix","text":"package provides functions compute ALRP (adaptive lasso based robust pariwise correlations) ALGR (adaptive lasso based Gaussrank correlations) proposed Peng Su, Samuel Muller Garth Tarr. manuscript found (https://arxiv.org/abs/2110.12406). added demonstration (demo), simulation workflow (simu) two real data applications (boston breastcancer) vignettes get started, can install package using: may also consider installing shootings package. functions package taken https://github.com/ineswilms/sparse-shooting-S compiled basic package make convenient use:","code":"remotes::install_github(\"PengSU517/robcovsel\") remotes::install_github(\"PengSU517/shootings\")"},{"path":"/reference/copulalasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — copulalasso","title":"Title — copulalasso","text":"Title","code":""},{"path":"/reference/copulalasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — copulalasso","text":"","code":"copulalasso(   x,   y,   cor.method = \"gaussrank\",   scale.method = \"qn\",   center.method = \"median\",   adaptive = TRUE )"},{"path":"/reference/copulalasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — copulalasso","text":"adaptive","code":""},{"path":"/reference/covf.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation estimators — covf","title":"Correlation estimators — covf","text":"Correlation estimators","code":""},{"path":"/reference/covf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation estimators — covf","text":"","code":"covf(x, cor.method, scale.method, center.method)"},{"path":"/reference/covf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation estimators — covf","text":"x input matrix cor.method \"sd\"  \"qn\" scale.method \"pearson\", \"pair\" \"gaussrank\" pda.method \"nearpd\" FALSE lmin min threshold eigenvalues","code":""},{"path":"/reference/covf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation estimators — covf","text":"covmatrix, estimated covariance matrix cormatrix, estimated correlation matrix scale, estimated scale vector lmin, min threshold eigenvalues","code":""},{"path":"/reference/covf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation estimators — covf","text":"","code":"x = matrix(rnorm(100), ncol = 10) covf(x) #> Error in covf(x): argument \"scale.method\" is missing, with no default"},{"path":"/reference/covlasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust adaptive lasso based on robust correlation estimates — covlasso","title":"Robust adaptive lasso based on robust correlation estimates — covlasso","text":"Robust adaptive lasso based robust correlation estimates","code":""},{"path":"/reference/covlasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust adaptive lasso based on robust correlation estimates — covlasso","text":"","code":"covlasso(   x,   y,   cor.method = \"gaussrank\",   scale.method = \"qn\",   center.method = \"median\",   adaptive = TRUE )"},{"path":"/reference/covlasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust adaptive lasso based on robust correlation estimates — covlasso","text":"x input design matrix y input response vector cor.method \"sd\" \"qn\" scale.method \"pearson\", \"pair\" \"gaussrank\" adaptive adaptive regularization penalties pda.method \"nearpd\" FALSE lmin min threshold eigenvalues std TRUE robust correlation matrix used, FALSE robust covariance matrix used. cormatrix also use correlation matrix input scale put scales use cormatrix","code":""},{"path":"/reference/covlasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust adaptive lasso based on robust correlation estimates — covlasso","text":"betahat_opt, optimal estimation beta obtained algorithm lambda_opt optimal tuning parameter sigma_opt optimal estimation sigma. output also includes estimated correlation matrix, estimated covariance matrix et cetera covf function.","code":""},{"path":"/reference/covlasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust adaptive lasso based on robust correlation estimates — covlasso","text":"","code":"dat = genevar() y = dat$y x = dat$x fit = covlasso(x,y) fit$betahat_opt #>    const.3      beta1      beta2      beta3      beta4      beta5      beta6  #> -0.5731841  0.0000000  1.5415224  1.5957187  2.3790625  0.0000000  0.0000000  #>      beta7      beta8      beta9     beta10     beta11     beta12     beta13  #>  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  #>     beta14     beta15     beta16     beta17     beta18     beta19     beta20  #>  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000"},{"path":"/reference/genevar.html","id":null,"dir":"Reference","previous_headings":"","what":"generating predictors and response randomly using default settings — genevar","title":"generating predictors and response randomly using default settings — genevar","text":"generating predictors response randomly using default settings","code":""},{"path":"/reference/genevar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generating predictors and response randomly using default settings — genevar","text":"","code":"genevar(   n = 100,   p = 20,   e = 0.05,   r = 0.5,   intercept = 0,   beta = c(1, 2, 1, 2, 1, rep(0, p - 5)),   gamma = 10,   errorsigma = 1 )"},{"path":"/reference/genevar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generating predictors and response randomly using default settings — genevar","text":"n sample size p dimension e contamination rate r correlation coefficent beta regression coefficients gamma magnitude outliers","code":""},{"path":"/reference/genevar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generating predictors and response randomly using default settings — genevar","text":"x, generated design matrix y, generated response vector beta, regression coefficients use","code":""},{"path":"/reference/grid_arrange_shared_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid_arrange_shared_legend — grid_arrange_shared_legend","title":"Grid_arrange_shared_legend — grid_arrange_shared_legend","text":"Grid_arrange_shared_legend","code":""},{"path":"/reference/grid_arrange_shared_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid_arrange_shared_legend — grid_arrange_shared_legend","text":"","code":"grid_arrange_shared_legend(   ...,   nrow = length(list(...)),   ncol = 1,   position = c(\"bottom\", \"right\") )"},{"path":"/reference/grid_arrange_shared_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid_arrange_shared_legend — grid_arrange_shared_legend","text":"position","code":""},{"path":"/reference/lminsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of the eigen value threshold — lminsel","title":"Selection of the eigen value threshold — lminsel","text":"Selection eigen value threshold","code":""},{"path":"/reference/lminsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of the eigen value threshold — lminsel","text":"","code":"lminsel(cormatrix)"},{"path":"/reference/lminsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection of the eigen value threshold — lminsel","text":"cormatrix input cormatrix","code":""},{"path":"/reference/lminsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selection of the eigen value threshold — lminsel","text":"lmin, min threshold eigenvalues","code":""},{"path":"/reference/nearpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"PD calibration — nearpdf","title":"PD calibration — nearpdf","text":"PD calibration","code":""},{"path":"/reference/nearpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PD calibration — nearpdf","text":"","code":"nearpdf(cormatrix, pda.method = \"shrink\", lmin = 0.1)"},{"path":"/reference/nearpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PD calibration — nearpdf","text":"cormatrix input cormatrix pda.method \"nearpd\" FALSE lmin min threshold eigenvalues","code":""},{"path":"/reference/nearpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PD calibration — nearpdf","text":"cormatrix.pd, positive-definite adjusted correlation matrix lmin, min threshold eigenvalues","code":""},{"path":"/reference/nearpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PD calibration — nearpdf","text":"","code":"x = matrix(rnorm(100), ncol = 10) nearpdf(cor(x), pda.method = \"nearpd\", lmin = 0.1) #> $cormatrix.pd #>              [,1]        [,2]        [,3]        [,4]       [,5]        [,6] #>  [1,]  1.02127939  0.31779538 -0.03465093  0.06423503 -0.3180430  0.78794727 #>  [2,]  0.31779538  1.00475575  0.10598676 -0.22440960  0.1663947 -0.10348005 #>  [3,] -0.03465093  0.10598676  1.00334752 -0.29974201  0.5989263 -0.22695572 #>  [4,]  0.06423503 -0.22440960 -0.29974201  1.02522041 -0.5771034  0.34218667 #>  [5,] -0.31804297  0.16639471  0.59892631 -0.57710345  1.0123287 -0.50471119 #>  [6,]  0.78794727 -0.10348005 -0.22695572  0.34218667 -0.5047112  1.01749561 #>  [7,] -0.11025580 -0.12908510  0.29642971 -0.37030508  0.3609871 -0.04449894 #>  [8,]  0.33412489 -0.52031900  0.03841629  0.12186258 -0.4409326  0.54002470 #>  [9,]  0.05355726 -0.07976179 -0.53241172  0.29916655 -0.2253926  0.28052171 #> [10,] -0.02144610 -0.49164257 -0.62430316 -0.05593301 -0.4442791  0.25444860 #>              [,7]        [,8]        [,9]       [,10] #>  [1,] -0.11025580  0.33412489  0.05355726 -0.02144610 #>  [2,] -0.12908510 -0.52031900 -0.07976179 -0.49164257 #>  [3,]  0.29642971  0.03841629 -0.53241172 -0.62430316 #>  [4,] -0.37030508  0.12186258  0.29916655 -0.05593301 #>  [5,]  0.36098715 -0.44093264 -0.22539258 -0.44427914 #>  [6,] -0.04449894  0.54002470  0.28052171  0.25444860 #>  [7,]  1.00090750  0.14606820  0.26637720  0.21570701 #>  [8,]  0.14606820  1.00289123 -0.17804796  0.40225273 #>  [9,]  0.26637720 -0.17804796  1.00723340  0.44320591 #> [10,]  0.21570701  0.40225273  0.44320591  1.03524489 #>  #> $lmin #> [1] 0.1 #>"},{"path":"/reference/paircorxyf.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise correlation between x and y — paircorxyf","title":"Pairwise correlation between x and y — paircorxyf","text":"Pairwise correlation x y","code":""},{"path":"/reference/paircorxyf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise correlation between x and y — paircorxyf","text":"","code":"paircorxyf(x, y, method = \"gaussrank\")"},{"path":"/reference/paircorxyf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise correlation between x and y — paircorxyf","text":"x input vector y input vector","code":""},{"path":"/reference/paircorxyf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise correlation between x and y — paircorxyf","text":"cor, pairwise correlations x y","code":""},{"path":"/reference/paircorxyf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise correlation between x and y — paircorxyf","text":"","code":"x = rnorm(100) y = rnorm(100) paircorxyf(x,y) #> Error in apply(x, 2, function(xvec) {    qnorm(rank(xvec)/(n + 1))}): dim(X) must have a positive length"}]
